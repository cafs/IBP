<?php
//$Id$

function jit_forcedirected_resources() {
	jit_resources();
	drupal_add_js(drupal_get_path('module', 'jit_forcedirected') .'/jit_forcedirected.js');
	drupal_add_css(drupal_get_path('module', 'jit_forcedirected') .'/jit_forcedirected.css');
}

function jit_forcedirected_menu() {
	
	$items = array();
	if (variable_get('jit_enable_debug', 0)) {
		$items['jit/forcedirected/debug'] = array(
			'page callback' => 'drupal_get_form',
			'page arguments' => array('_jit_forcedirected_debug_form'),
			'title' => 'JIT Force Directed: DEBUG',
			'type' => MENU_CALLBACK,
			'access arguments' => array('access content'),
			);
		$items['admin/settings/jit/forcedirected'] = array(
			'page callback' => 'drupal_get_form',
			'page arguments' => array('jit_forcedirected_admin_form'),
			'title' => t('JIT Force Directed settings'),
			'access arguments' => array('administer jit')
			);
// 		$items['jit/forcedirected/debug/node_info/%'] = array(
// 			'page callback' => '_jit_forcedirected_debug_node_info',
// 			'page arguments' => array(4),
// 			'title' => 'JIT Force Directed: DEBUG node info',
// 			'type' => MENU_CALLBACK,
// 			'access arguments' => array('access content'),
// 			);
// 		$items['jit/forcedirected/debug/search'] = array(
// 			'page callback' => '_jit_forcedirected_debug_node_search',
// 			'title' => 'JIT Force Directed: DEBUG node search',
// 			'type' => MENU_CALLBACK,
// 			'access arguments' => array('access content'),
// 			);
	}
	return $items;
}

function jit_forcedirected_theme() {
	return array(
		/*
		 * @param	$json the JSON data to visualize;
		 * @param $options additional parameters for JIT, overrides $defaults
		 */
		'jit_forcedirected' => array(
			'arguments' => array(
				'json' => null,
				'options' => null,
				),
			'template' => 'theme/jit-forcedirected',
			),
		);
}

function jit_forcedirected_preprocess_jit_forcedirected(&$vars) {
	jit_forcedirected_resources();
	
	$defaults = array(
		'id' => 'forcedirected',										// id of FD HTML element
		'label_color' => '#454545',
		'edge_color' => '#454545',
		'levelDistance' => variable_get('jit_forcedirected_level_distance', 150),
		);
	
	$vars['options'] = array_merge($defaults, $vars['options']);
	
	$node_prefix = $vars['options']['id'] . '_node_';
	foreach ($vars['json'] as &$node) {
		$node->id = $node_prefix . $node->id;
		foreach ($node->adjacencies as &$adj) {
			$adj->nodeTo = $node_prefix . $adj->nodeTo;
			$adj->nodeFrom = $node_prefix . $adj->nodeFrom;
		}
	}
}

function _jit_forcedirected_debug_form(&$form_state) {
	$form = array();
	
	$form['demo'] = array(
		'#value' => theme('jit_forcedirected', _jit_forcedirected_debug_generate(), array())
		);
	
	return $form;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function jit_forcedirected_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "ctools_plugins/$plugin";
  }
}


function _jit_forcedirected_debug_generate($nodes = 10) {
	$types = array('circle', 'square', 'triangle', 'star');
	$colors = array('#83548B','#EBB056','#416D9C','#C74243','#70A35E');
	$json = array();
	
	for ($i = 0; $i < $nodes; $i++) {
		$node = new stdClass;
		$node->adjacencies = array();
		$node->data = new stdClass;
		$node->data->{'$type'} = $types[array_rand($types)];
		$node->data->{'$dim'} = rand(10,15);
		$node->data->{'$color'} = $colors[array_rand($colors)];
		$node->id = $node->name = "graphnode$i";
		$json[] = $node;
	}
	
	for ($i = 0; $i < $nodes; $i++) {
		$keys = array_rand($json, rand(2,$nodes-1));
		foreach ($keys as $key) {
			$adj = new stdClass;
			$adj->nodeTo = "graphnode$key";
			$adj->nodeFrom = "graphnode$i";
			$adj->data = new stdClass;
			$adj->data->{'$color'} = '#2d89b2';
			$json[$i]->adjacencies[] = $adj;
		}
	}
	
	return $json;
}

function jit_forcedirected_admin_form(&$form_state) {
	$form = array();
	
	$form['jit_forcedirected_default_node_color'] = array(
		'#type' => 'textfield',
		'#title' => t('Default node color'),
		'#default_value' => variable_get('jit_forcedirected_default_node_color', '#0000cd'),
		);
		
	$form['jit_forcedirected_default_edge_color'] = array(
		'#type' => 'textfield',
		'#title' => t('Default edge color'),
		'#default_value' => variable_get('jit_forcedirected_default_edge_color', '#888888'),
		);
		
	$form['jit_forcedirected_default_shape'] = array(
		'#type' => 'select',
		'#options' => array('circle'=>'circle', 'square'=>'square', 'triangle'=>'triangle', 'star'=>'star'),
		'#title' => t('Default node shape'),
		'#default_value' => variable_get('jit_forcedirected_default_shape', 'circle')
		);
		
	$form['jit_forcedirected_level_distance'] = array(
		'#type' => 'textfield',
		'#title' => t('Edge length/Level distance'),
		'#description' => t('The distance between nodes for the Force Directed layout algorithm.  The large the number, the farther apart nodes will be.'),
		'#default_value' => variable_get('jit_forcedirected_level_distance', 150),
		);
	
	$form['#validate'] = array('jit_forcedirected_admin_form_submit');
	
	return system_settings_form($form);
}

function jit_forcedirected_admin_form_submit($form, &$form_state) {
	$nodeColor = $form_state['values']['jit_forcedirected_default_node_color'];
	if (strpos($nodeColor, '#') === 0) {
		$nodeColor = substr($nodeColor, 1);
	}
	if (strlen($nodeColor) === 3 || strlen($nodeColor) === 6) {
		if (! preg_match('/[a-fA-F0-9]+/', $nodeColor)) {
			form_set_error('jit_forcedirected_default_node_color', t('Please provide a valid hexadecimal color code for the node color.'));
		}
	} else {
		form_set_error('jit_forcedirected_default_node_color', t('Please provide a valid hexadecimal color code for the node color.'));
	}
	$edgeColor = $form_state['values']['jit_forcedirected_default_edge_color'];
	if (strpos($edgeColor, '#') === 0) {
		$edgeColor = substr($edgeColor, 1);
	}
	if (strlen($edgeColor) === 3 || strlen($edgeColor) === 6) {
		if (! preg_match('/[a-fA-F0-9]+/', $edgeColor)) {
			form_set_error('jit_forcedirected_default_edge_color', t('Please provide a valid hexadecimal color code for the edge color.'));
		}
	} else {
		form_set_error('jit_forcedirected_default_edge_color', t('Please provide a valid hexadecimal color code for the edge color.'));
	}
	if (! is_numeric($form_state['values']['jit_forcedirected_level_distance'])) {
		form_set_error('jit_forcedirected_level_distance', t('Edge length must be a numeric value.'));
	}
}