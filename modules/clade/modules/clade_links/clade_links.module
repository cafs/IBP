<?php

// $Id$

/**
 * TODO!
 * Implementation of hook_menu
 * callbacks
 * create clade link
 *    @param clade {node}
 */
 
function clade_links_menu() {
  $items = array();
  
  $items['clade/%clade/edit/links'] = array(
  	'title' => 'Links',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('clade_links_form', 1),
  	'access arguments' => array('edit own clade'),
  	'type' => MENU_LOCAL_TASK,
  );
	$items['clade/%clade/clade_links/ajax_more'] = array(
			'page callback' => 'clade_links_ajax_more',
			'title' => 'Javascript More Form',
			'access arguments' => array('edit own clade'),
			'type' => MENU_CALLBACK,
		);
		
  return $items;
}

function clade_links_block($op = 'list', $delta = 0) {
	$block = array();
	switch ($op) {
		case 'list':
			$block[0]['info'] = t('Clade Links');
			break;
		case 'view':
			$block = clade_links_links_block();
			break;
	}
	return $block;
}

function clade_links_links_block() {
	
	$clade = clade_get_context();
	if ($clade) {
		$links = array();
		
		// Generate our block content
		//if there's an NCBI ID configured, then we can search there and in Treebase using it.
// 		if($clade->ncbiid) {
// 			$links[] = l( t('Search NCBI'), 'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=info&id=' . $clade->ncbiid, array('attributes' => array('target' => '_blank')));
// 			$links[] = l( t('Search TreeBase'), 'http://purl.org/phylo/treebase/phylows/taxon/find?query=tb.identifier.ncbi=' . $clade->ncbiid, array('attributes' => array('target' => '_blank')));
// 		} else {
// 			$links[] = l( t('Search NCBI'),'http://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/index.cgi' , array('attributes' => array('target' => '_blank')));
// 			$links[] = l( t('Search TreeBase'), 'http://treebase.org/treebase-web/search/taxonSearch.html', array('attributes' => array('target' => '_blank')));
// 		}
// 		//configure the link to the Tree of Life website
// 		if($clade->tolwebid) {
// 			$links[] = l( t('Tree of Life Link'), 'http://tolweb.org/' . $clade->tolwebid, array('attributes' => array('target' => '_blank')));
// 		} else {
// 			$links[] = l( t('Tree of Life Link'), 'http://tolweb.org/', array('attributes' => array('target' => '_blank')));
// 		}
// 		
// 		if($clade->eolweburl) {
// 			$links[] = l( t('Encyclopedia of Life Link'), $clade->eolweburl, array('attributes' => array('target' => '_blank')));
// 		} else {
// 			$links[] = l( t('Encyclopedia of Life Link'), 'http://www.eol.org/', array('attributes' => array('target' => '_blank')));
// 		}
// 		
// 		if($clade->plantlisturl) {
// 			$links[] = l( t('The Plant List Link'), $clade->plantlisturl, array('attributes' => array('target' => '_blank')));
// 		} else {
// 			$links[] = l( t('The Plant List Link'), 'http://www.theplantlist.org', array('attributes' => array('target' => '_blank')));
// 		}
		
		if ($clade->links) {
			foreach($clade->links as $l) {
				$options = array(
						'target' => '_blank',
					);
				if ($l->linkdescription) {
					$options['title'] = $l->linkdescription;
				}
				$links[] = l(t($l->linktext ? $l->linktext : $l->url), $l->url, array('attributes' => $options));
			}
		}
		
		if ($links) {
			$block['subject'] = t($clade->title . ' Links');
			$block['content'] = theme('item_list', $links, NULL, 'ul', array('class'=>'myplant iplant'));
			return $block;
		}
	}
}

/**
 * implementation of hook_form()
 */
function clade_links_form(&$form_state, $clade) {
	
	$form['#action'] = url("clade/{$clade->tid}/edit/links");
	
	if (isset($form_state['link_count'])) {
    $link_count = $form_state['link_count'];
  }
  else {
    $link_count = max(1, empty($clade->links) ? 1 : count($clade->links));
  }
	
	$form['links'] = array(
    '#prefix' => '<div id="clade-links">',
    '#suffix' => '</div>',
    '#tree' => 1,
  );

	// fields for existing links	
	for ($delta = 0; $delta < $link_count; $delta++) {
		$form['links'][$delta] = clade_links_form_item($clade, $clade->links[$delta]);
	}
	
	$form['clade_links_more'] = array (
		'#type' => 'submit',
		'#value' => 'Add Another Link',
		'#description' => 'If you want to add more than one link, click here for another Link Field.',
		'#submit' => array('clade_links_more_links_submit'),
		'#validate' => array(),
		'#ahah' => array(
			 'path' => "clade/{$clade->tid}/clade_links/ajax_more",
			 'wrapper' => 'clade-links',
			 'method' => 'append',
			 'effect' => 'slide'
			)
		);
	
	$form['buttons'] = array(
		'#prefix' => '<div class="button-row">',
		'#suffix' => '</div>',
	);
	$form['buttons']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save links'),
	);
	$form['buttons']['cancel'] = array(
		'#value' => l(t('Cancel'), "clade/{$clade->tid}"),
	);
	
	$form['#theme'] = 'clade_links_form';
	
	return $form;
}

function clade_links_form_item($clade, $link = array()) {
	
	$form['#prefix'] = "<div class='link-row'>";
	$form['#suffix'] = "</div>";
	
	$form['lid'] = array (
		'#type' => 'hidden',
		'#title' => t('Link ID (internal)'),
		'#description' => t("Link ID, just for internal stuff."),
		'#default_value' => $link->lid,
  );
  $form['tid'] = array (
		'#type' => 'hidden',
		'#title' => t('Node ID (internal)'),
		'#description' => t("Node ID, just for internal stuff."),
		'#default_value' => $clade->tid,
  );
  $form['url'] = array (
		'#type' => 'textfield',
		'#title' => t('Link URL'),
		'#description' => t("The URL for the link."),
		'#default_value' => $link->url,
  );
  $form['linktext'] = array (
		'#type' => 'textfield',
		'#title' => t('Link Text'),
		'#description' => t("The text that should display for the link.  If omitted, the URL will display."),
		'#default_value' => $link->linktext,
  );
  $form['linkdescription'] = array (
		'#type' => 'textfield',
		'#title' => t('Description'),
		'#description' => t("An optional description of the link.  This will appear as a tooltip on the link."),
		'#default_value' => $link->linkdescription,
  );
  if ($link->lid) {
		$form['delete'] = array (
			'#type' => 'checkbox',
			'#title' => t('Delete this link'),
			'#attributes' => array('class' => 'link-delete'),
		);
	}
  return $form;
}

function _clade_links_load_links($clade) {
	$links = array();
	$result = db_query('SELECT lid, tid, url, linktext, linkdescription FROM {clade_links} WHERE tid = %d ORDER BY lid', $clade->tid);
	while ($link = db_fetch_object($result)) {
		$links[] = $link;
	}
	return $links;
}

function clade_links_clade($op, $clade = NULL) {
	if ($op == 'clade load') {
		$clade->links = _clade_links_load_links($clade);
	}
}

function clade_links_form_validate($form, &$form_state) {
	foreach ($form_state['values']['links'] as $l => $link) {
		// check that urls provided for all existing links
		if ($link['lid'] && ! $link['url']) {
			form_set_error("links][$l][url", 'A URL is required for each link.');
		}
		// check that all new links have urls provided
		else if (($link['linktext'] || $link['linkdescription']) && !$link['url']) {
			form_set_error("links][$l][url", 'A URL is required for each link.');
		}
	}
}

function clade_links_form_submit($form, &$form_state) {
	foreach ($form_state['values']['links'] as $link) {
		
		if (isset($link['delete']) && $link['delete']) {
			db_query('DELETE FROM {clade_links} WHERE lid = %d', $link['lid']);
		} else if ($link['url']){
			if (! preg_match('/^https?:\/\//', $link['url'])) {
				$link['url'] = 'http://' . $link['url'];
			}
			
			if ($link['lid']) {
				drupal_write_record('clade_links', $link, array('lid'));
			} else if ($link['url']) {
				drupal_write_record('clade_links', $link);
			}
		}
	}
	drupal_set_message(t('Links saved!'), 'success');
}

/**
 * Submit handler to add more choices to a poll form. This handler is used when
 * javascript is not available. It makes changes to the form state and the
 * entire form is rebuilt during the page reload.
 */
function clade_links_more_links_submit($form, &$form_state) {
	$form_state['link_count'] = count($form_state['values']['links']) + 1;
}

function clade_links_ajax_more() {

  // get cached form
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);

  // prepare to process form
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // process form
  drupal_process_form($form_id, $form, $form_state);
  
  // rebuild form
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // get the part of the form to re-render
  $link_form = $form['links'];
  
  // remove wrapper elements
  unset($link_form['#prefix'], $link_form['#suffix']);
  
  // only render new links
  $n = $form_state['link_count'];
  for ($rendered = 0; $rendered < $n - 1; $rendered++) {
  	unset($link_form[$rendered]);
  }
  $output = theme('status_messages') . drupal_render($link_form); 	

  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}

function clade_links_theme($existing, $type, $theme, $path) {
	return array(
		'clade_links_form' => array(
			'arguments' => array('form' => NULL)
		),
	);
}

function theme_clade_links_form($form) {
	drupal_add_css(drupal_get_path('module','clade_links').'/css/clade-links.css');
	drupal_add_js(drupal_get_path('module','clade_links').'/js/clade-links.js');
	
	return drupal_render($form);
}