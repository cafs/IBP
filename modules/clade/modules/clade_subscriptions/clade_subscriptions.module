<?php
//$Id$
function clade_subscriptions_init() {
  global $user;
	clade_set_context(clade_determine_context());
  if ($user->uid) {
    // $user gets modified by reference.
    clade_subscriptions_user('load', array(), $user);
  } else {
    $user->clades = array();
  }

	$clade = clade_get_context();
	if ($clade != NULL) {
		drupal_add_css(drupal_get_path('module', 'clade_subscriptions') . '/css/clade_subscriptions.css');
	}
}

function clade_subscriptions_menu() {
	$items = array();

	/*
		Managed by Views
		clade/%/members - implicit menu item in clade_members_faces
		clade/%/members/faces - clade_members_faces
		clade/%/members/list - clade_members_list
	*/

	$items['clade/%/my-membership'] = array(
		'title callback' => 'clade_subscriptions_my_membership_title',
		'title arguments' => array(1),
		'type' => MENU_CALLBACK,
		'page callback' => 'clade_subscriptions_my_membership',
		'page arguments' => array(1),
		'access callback' => 'clade_subscriptions_my_membership_access',
		'access arguments' => array(1),
		);

	$items['clade/%/members/join'] = array(
		'title' => 'Join Clade',
		'type' => MENU_CALLBACK,
		'page callback' => 'clade_subscriptions_join',
		'page arguments' => array(1),
		'access callback' => 'clade_subscriptions_access_join',
		'access arguments' => array(1),
		);

	$items['clade/%/members/unjoin/%user'] = array(
		'title' => 'Leave Clade',
		'type' => MENU_CALLBACK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('clade_subscriptions_confirm_unjoin', 1, 4),
		'access callback' => 'clade_subscriptions_access_unjoin',
		'access arguments' => array(1, 4),
		);

	$items['clade/%/members/create_admin/%user'] = array(
		'title' => 'Create clade manager',
		'type' => MENU_CALLBACK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('clade_subscriptions_create_admin', 1, 4),
		'access callback' => 'clade_subscriptions_access_create_admin',
		'access arguments' => array(1, 4),
		);

	$items['clade/%/members/remove_admin/%user'] = array(
		'title' => 'Remove clade manager',
		'type' => MENU_CALLBACK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('clade_subscriptions_remove_admin', 1, 4),
		'access arguments' => array('edit any clade'),
		);

	return $items;
}

function clade_subscriptions_theme() {
	return array(
		'clade_homepage_members' => array(
			'arguments' => array(
				'members' => NULL,
				'title' => t('Members'),
				),
			'template' => 'theme/clade-homepage-members',
			),
		'views_view_table__clade_my_clades__block' => array(
			'arguments' => array(
				'view' => NULL,
				'options' => NULL,
				'rows' => NULL,
				'title' => NULL,
				),
			'template' => 'views-view-table--clade-my-clades--block',
			'original hook' => 'views_view_table',
			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
			),
// 		'views_view_unformatted__clade_members_faces' => array(
// 			'arguments' => array(
// 				'view' => NULL,
// 				'options' => NULL,
// 				'rows' => NULL,
// 				'title' => NULL
// 				),
// 			'template' => 'views-view-unformatted--clade-members-faces',
// 			'original hook' => 'views_view_unformatted',
// 			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
// 			),
// 		'views_view_fields__clade_members_faces' => array(
// 			'arguments' => array(
// 				'view' => NULL,
// 				'options' => NULL,
// 				'rows' => NULL,
// 				'output' => NULL,
// 				'fields' => NULL,
// 				),
// 			'template' => 'views-view-fields--clade-members-faces',
// 			'original hook' => 'views_view_fields',
// 			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
// 			),
		'clade_subscriptions_subscribe_email' => array(
			'arguments' => array(
				'clade_name' => NULL,
				'homepage_link' => NULL,
				'to' => NULL,
				'from' => NULL,
				),
			'template' => 'subscribe_email',
			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
			),
		'clade_subscriptions_unsubscribe_email' => array(
			'arguments' => array(
				'clade_name' => NULL,
				'to' => NULL,
				'from' => NULL,
				),
			'template' => 'unsubscribe_email',
			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
			),
		'clade_subscriptions_subscriptions' => array(
			'arguments' => array(
				'user' => NULL,
				'clade' => NULL,
				),
			'template' => 'clade_subscriptions_subscriptions',
			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
			),
		'clade_subscriptions_membership' => array(
			'arguments' => array(
				'user' => NULL,
				'clade' => NULL,
				),
			'template' => 'clade_subscriptions_membership',
			'path' => drupal_get_path('module', 'clade_subscriptions') . '/theme',
			),
		);
}

function clade_subscriptions_form_alter(&$form, &$form_state, $form_id) {
	global $user;
	if ($form_id == 'notifications_subscription_form') {
		$subscription = $form['subscription']['#value'];
		if ($subscription->type == 'taxonomy') {
			if ($clade = clade_get_clade($subscription->fields['tid'])) {
				$form['info']['#title'] = t('Clade subscription');
				$form['info']['#description'] = t('Subscribe to content in this Clade.');
				$form['info']['#value'] = l($clade->name, "clade/{$clade->tid}");
				unset($form['delete']);
			}
		}
	}
}

// function clade_subscriptions_preprocess_views_view_fields__clade_members_faces(&$vars) {
// 	drupal_add_css(drupal_get_path('module', 'clade_subscriptions') . '/css/clade_subscriptions_views.css');
// 	$view = $vars['view'];
//
//   // Loop through the fields for this view.
//   $inline = FALSE;
//   $vars['fields'] = array(); // ensure it's at least an empty array.
//   foreach ($view->field as $id => $field) {
//     // render this even if set to exclude so it can be used elsewhere.
//     $field_output = $view->style_plugin->get_field($view->row_index, $id);
//     $empty = $field_output !== 0 && empty($field_output);
//     if (empty($field->options['exclude']) && (!$empty || empty($field->options['hide_empty']))) {
//       $object = new stdClass();
//
//       $object->content = $field_output;
//       if (isset($view->field[$id]->field_alias) && isset($vars['row']->{$view->field[$id]->field_alias})) {
//         $object->raw = $vars['row']->{$view->field[$id]->field_alias};
//       }
//       else {
//         $object->raw = NULL; // make sure it exists to reduce NOTICE
//       }
//       $object->inline = !empty($vars['options']['inline'][$id]);
//       $object->inline_html = $object->inline ? 'span' : 'div';
//       if (!empty($vars['options']['separator']) && $inline && $object->inline && $object->content) {
//         $object->separator = filter_xss_admin($vars['options']['separator']);
//       }
//
//       $inline = $object->inline;
//
//       $object->handler = &$view->field[$id];
//       $object->element_type = $object->handler->element_type();
//
//       $object->class = views_css_safe($id);
//       $object->label = check_plain($view->field[$id]->label());
//       $vars['fields'][$id] = $object;
//     }
//   }
// }

function clade_subscriptions_clade_details_items($clade) {
	global $user;

	$admins = array();
	$count = 0;
	$sql = "SELECT cu.* FROM {clade_uid} cu WHERE cu.tid = %d";
	$members = db_query($sql, $clade->tid);
	while ($member = db_fetch_object($members)) {
		$count++;
		if ($member->is_admin) {
			$admin = user_load($member->uid);
			if (! $admin->picture) {
				$admin->picture = variable_get('user_picture_default', '');
			}
			$admins[] = array(
				'data' => theme('imagecache', 'profile_tiny', $admin->picture) . theme('username', $admin),
				'class' => 'clade-manager',
				);
		}
	}
	$items = array();
	if ($count) {
		$items['members'] = array(
			'data' => l(t('@num members', array('@num' => $count)), "clade/$clade->tid/members"),
			'data-sort' => 40,
			'class' => 'clade-details-item',
			);
	}
	if ($admins) {
		$items['admins'] = array(
			'data' => theme('item_list', $admins, t('Clade Managers'), 'ul', array('class' => 'clade-details-admins')),
			'data-sort' => 100
			);
	}
	if ($user->uid) {
		if (! array_key_exists($clade->tid, $user->clades)) {
			$items['membership'] = array(
				'data' => l(t('Join this Clade'), "clade/$clade->tid/members/join"),
				'data-sort' => 50,
				'class' => 'clade-details-item',
				);
		} else {
			$items['membership'] = array(
				'data' => l(t('My membership'), "clade/$clade->tid/my-membership"),
				'data-sort' => 50,
				'class' => 'clade-details-item',
				);
		}
	} else {
		$items['membership'] = array(
			'data' => l(t('Login to join or post'), variable_get('shib_auth_handler_url', 'user/login'), array('query' => array('destination' => "clade/$clade->tid"))),
			'data-sort' => 50,
			'class' => 'clade-details-item',
			);
	}

	return $items;
}

function clade_subscriptions_clade_jit_node_info_items($clade) {
	global $user;

	$items = array();
	if ($user->uid) {
		if (!($user->clades && array_key_exists($clade->tid, $user->clades))) {
			$items[] = array('data' => l(t('Join this Clade'), "clade/$clade->tid/members/join"), 'data-sort' => 5);
		}
	} else {
		$items[] = array('data' => l(t('Login to join or post'), "user/login", array("query" => array("destination" => "clade/$clade->tid"))), 'data-sort' => 5);
	}
	return $items;
}

function clade_subscriptions_my_membership() {
	global $user;

	// Email settings
	$output = theme('clade_subscriptions_subscriptions', $user, clade_get_context());

	// Join/leave
	$output .= theme('clade_subscriptions_membership', $user, clade_get_context());

	return $output;
}

function clade_subscriptions_my_membership_title($clade_id) {
	$clade = clade_get_clade($clade_id);
	return t('Manage my membership: @clade', array('@clade' => $clade->name));
}

function clade_subscriptions_my_membership_access($clade_id) {
	global $user;

	if ($user->uid) {
		$clade = clade_get_clade($clade_id);
		$members = clade_subscriptions_clade_members($clade);
		return in_array($user->uid, $members);
	}

	return FALSE;
}

function clade_subscriptions_preprocess_clade_subscriptions_subscriptions(&$vars) {
	$user = $vars['user'];
	$clade = $vars['clade'];

	$sub = array_pop(notifications_get_subscriptions(array('type' => 'taxonomy', 'uid' => $user->uid), array('tid' => $clade->tid), TRUE));
	if ($sub) {
		$vars['subscription'] = $sub;
		module_load_include('inc', 'notifications', 'notifications.pages');
		$vars['subscription_form'] = drupal_get_form('notifications_subscription_form', $sub);
	} else {
		$vars['subscription_form'] = l(t('Start getting email notifications for this Clade'), "notifications/subscribe/$user->uid/taxonomy/tid/$clade->tid");
	}
}

function clade_subscriptions_preprocess_clade_subscriptions_membership(&$vars) {
	$user = $vars['user'];
	$clade = $vars['clade'];

	$vars['membership_form'] = drupal_get_form('clade_subscriptions_unjoin_form', $clade->tid, $user);
}

function clade_subscriptions_clade_members($clade) {
	$sql = "SELECT * FROM {clade_uid} WHERE tid = %d";
	$results = db_query($sql, $clade->tid);
	$members = array();
	while ($row = db_fetch_object($results)) {
		$members[] = $row->uid;
	}
	return $members;
}

function clade_subscriptions_clade_admins($clade) {
	$sql = "SELECT * FROM {clade_uid} WHERE tid = %d AND is_admin";
	$results = db_query($sql, $clade->tid);
	$admins = array();
	while ($row = db_fetch_object($results)) {
		$admins[] = $row->uid;
	}
	return $admins;
}

// function clade_subscriptions_preprocess_clade_homepage(&$vars) {
// 	$clade = $vars['clade'];
//
//  	$members_view = views_get_view('clade_members_faces');
//  	$output = $members_view->preview('default', array($clade->tid));
//  	if ($members_view->result) {
//  		$members = $output;
//  	} else {
//  		$members = t('No members. ') . l(t('Join this Clade!'), "/clade/subscribe/$clade->tid");
//  	}
// 	$vars['members'] = theme('clade_homepage_members', $members);
// }

function clade_subscriptions_views_api() {
  return array(
    'api' => 2,
  );
}

function clade_subscriptions_subscribe_user($clade_id, $account) {
	if ($account->uid > 0) { // don't accidentialy subscribe anonymous
		$clade = clade_get_clade($clade_id);
		clade_subscriptions_save_subscription($clade_id, $account->uid);
		$to_name = $account->name;
		if ($account->profile) {
			$to_name = $account->profile->field_profile_first_name[0]['value'] . ' ' . $account->profile->field_profile_last_name[0]['value'];
		}
		$params = array(
			'clade_name' => $clade->name,
			'clade_homepage_link' => l(t('Clade homepage'), "clade/{$clade->tid}", array('absolute' => TRUE)),
			'to_name' => $to_name,
			'from_name' => t('The @clade_name Clade Managers', array('@clade_name' => $clade->name)),
			);
		drupal_mail(
			'clade_subscriptions',
			'subscribe',
			$account->mail,
			$account->language,
			$params,
			t('@clade_name Managers <@site_mail>', array('@clade_name' => $clade->name, '@site_mail' => variable_get('site_mail', '')))
		);

		return array('type' => 'subscribed',
													'message' => t('You are now a member of %group.', array('%group' => $clade->name)));
	}
}

function clade_subscriptions_save_subscription($clade_id, $uid, $args = array()) {
  if ($uid > 0) {
    $sql = "SELECT * FROM {clade_uid} WHERE tid = %d AND uid = %d";
    $subscription = db_fetch_array(db_query($sql, $clade_id, $uid));
    $time = time();
    if (! empty($subscription)) {
    	$subscription['changed'] = $time;
    	$update = array('tid', 'uid');
    } else {
			$subscription = array(
				'tid' => $clade_id,
				'uid' => $uid,
				'created' => isset($args['created']) ? $args['created'] : $time,
				'changed' => $time
			);
    }
    unset($args['created']);
    $subscription += $args;

    if ($update) {
      drupal_write_record('clade_uid', $subscription, $update);
    }
    else {
      drupal_write_record('clade_uid', $subscription);
    }

		$subscription = array(
			'uid' => $uid,
			'send_interval' => 0,
			'send_method' => 'phpmailer',
			'type' => 'taxonomy',
			'event_type' => 'node',
			'fields' => array(
				'tid' => $clade_id,
				),
			);
		notifications_save_subscription($subscription);
  }
}

function clade_subscriptions_unsubscribe_user($clade_id, $account) {
	clade_subscriptions_delete_subscription($clade_id, $account->uid);

	$clade = clade_get_clade($clade_id);
		$to_name = $account->name;
		if ($account->profile) {
			$to_name = $account->profile->field_profile_first_name[0]['value'] . ' ' . $account->profile->field_profile_last_name[0]['value'];
		}
	$params = array(
		'clade_name' => $clade->name,
		'to_name' => $to_name,
		'from_name' => t('The @clade_name Clade Managers', array('@clade_name' => $clade->name)),
		);
	drupal_mail(
		'clade_subscriptions',
		'unsubscribe',
		$account->mail,
		$account->language,
		$params,
		t('@clade_name Managers <@site_mail>', array('@clade_name' => $clade->name, '@site_mail' => variable_get('site_mail', '')))
	);
}

function clade_subscriptions_delete_subscription($clade_id, $uid) {
  $sql = "DELETE FROM {clade_uid} WHERE tid = %d AND uid = %d";
  db_query($sql, $clade_id, $uid);
	$subs = notifications_get_subscriptions(array('type' => 'taxonomy', 'uid' => $uid), array('tid' => $clade_id), TRUE);
	foreach ($subs as $sid => $sub) {
		notifications_delete_subscription($sid);
	}
}

function clade_subscriptions_mail($key, &$message, $params) {
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
	if ($key === 'subscribe') {
		$message['subject'] = t('Welcome to the @clade Clade', array('@clade' => $params['clade_name']));
		$message['body'] = theme('clade_subscriptions_subscribe_email', $params['clade_name'], $params['clade_homepage_link'], $params['to_name'], $params['from_name']);
	} else if ($key === 'unsubscribe') {
		$message['subject'] = t('You have left the @clade Clade', array('@clade' => $params['clade_name']));
		$message['body'] = theme('clade_subscriptions_unsubscribe_email', $params['clade_name'], $params['to_name'], $params['from_name']);
	}
}

function clade_subscriptions_join($clade_id, $uid = NULL) {
  global $user;
  $clade = clade_get_clade($clade_id);

  if (is_null($uid)) {
    if ($user->uid) {
      $account = $user;
    }
  }
  else {
    $account = user_load(array('uid' => $uid));
  }

  // User is already a member of this group, redirect to group homepage.
  if (isset($account->clades[$clade_id])) {
    drupal_set_message(t('@user is already a member the clade @group.', array('@user' => $account->name, '@group' => $clade->name)));
    drupal_goto('clade/'. $clade->tid);
  }
  else {
    return drupal_get_form('clade_subscriptions_confirm_join', $clade_id, $clade, $account);
  }
}

function clade_subscriptions_confirm_join($form_state, $clade_id, $clade, $account) {
  $form['clade_id'] = array('#type' => 'value', '#value' => $clade_id);
  $form['account'] = array('#type' => 'value', '#value' => $account);
	return confirm_form($form,
                t('Are you sure you want to join the clade %title?', array('%title' => $clade->name)),
                'clade/'. $clade->tid, ' ',
                t('Join'), t('Cancel'));
}

/**
 * Confirm clade join submit handler
 */
function clade_subscriptions_confirm_join_submit($form, &$form_state) {
  $return = clade_subscriptions_subscribe_user($form_state['values']['clade_id'], $form_state['values']['account']);
  if (!empty($return['message'])) {
      drupal_set_message($return['message']);
  }
  $form_state['redirect'] = 'clade/'. $form_state['values']['clade_id'];
}

function clade_subscriptions_access_join($clade_id) {
	global $user;

	if ($user->uid) {
		$clade = clade_get_clade($clade_id);
		$members = clade_subscriptions_clade_members($clade);
		if (in_array($user->uid, $members)) {
			drupal_set_message(t('You are already a member of @clade!', array('@clade' => $clade->name)));
			drupal_goto("clade/$clade_id");
		} else {
			return TRUE;
		}
	}
	return FALSE;
}

function clade_subscriptions_access_unjoin($clade_id, $account) {
	global $user;
	$access = FALSE;

	if (empty($account)) {
		$account = $user;
	}

	$clade = clade_get_clade($clade_id);
	$admins = clade_subscriptions_clade_admins($clade);

	if (! in_array($account->uid, $admins)) {
		if ($user->uid != $account->uid) {
			// check if admin
			$access = in_array($user->uid, $admins);
		} else {
			// check if member
			$members = clade_subscriptions_clade_members($clade);
			if (in_array($user->uid, $members)) {
				$access = ! in_array($user->uid, $admins);
			}
		}

		if (! $access) {
			$access = user_access('edit any clade');
		}
	}

	return $access;
}

function clade_subscriptions_unjoin_form(&$form_state, $clade_id, $account) {
	$clade = clade_get_clade($clade_id);

	$form = array();

  $form['clade'] = array('#type' => 'value', '#value' => $clade);
  $form['account'] = array('#type' => 'value', '#value' => $account);

  $form['message'] = array(
  	'#value' => '<strong>' . t('Leave the @clade Clade', array('@clade' => $clade->name)) . '</strong> ',
  	);

  $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => 'Leave',
  	);

  $form['#redirect'] = "clade/$clade_id/members/unjoin/{$account->uid}";

	return $form;
}

function clade_subscriptions_confirm_unjoin(&$form_state, $clade_id, $account) {
  global $user;
  $clade = clade_get_clade($clade_id);
  $form['clade'] = array('#type' => 'value', '#value' => $clade);
  $form['account'] = array('#type' => 'value', '#value' => $account);
  if ($account->uid == $user->uid) {
    $message = t('Are you sure you want to leave the clade %title?', array('%title' => $clade->name));
    $confirm_text = t("Leave");
  }
  else {
    $message = t('Are you sure you want to remove !name from the clade %title?', array('!name' => theme('username', $account), '%title' => $clade->name));
    $confirm_text = t("Remove");
  }

  return confirm_form($form, $message, "clade/$clade_id", ' ', $confirm_text, t('Cancel'));
}

/**
 * Confirm clade unjoin submit handler
 */
function clade_subscriptions_confirm_unjoin_submit($form, &$form_state) {
  global $user;
  $clade = $form_state['values']['clade'];
  $account = $form_state['values']['account'];
  clade_subscriptions_unsubscribe_user($clade->tid, $account);
  // If needed, reload user object to reflect unsubscribed group.
  if ($user->uid == $account->uid) {
    clade_subscriptions_get_subscriptions($account->uid, 1, TRUE); // Clear cache.
    $user = user_load(array('uid' => $user->uid));
    $message = t('You left the clade %group.', array('%group' => $clade->name));
  }
  else {
    $message = t('%user removed from %group.', array('%user' => $account->name, '%group' => $clade->name));
  }
  drupal_set_message($message);

  // Determine where to go next. GHP if accessible, or else site front page.
  $form_state['redirect'] = "clade/". $clade->tid;
}

function clade_subscriptions_user($op, $edit, &$account, $category = NULL) {
	global $user;
	switch ($op) {
    case 'load':
      $account->clades = clade_subscriptions_get_subscriptions($account->uid);
      clade_subscriptions_grant_roles($account);
      break;
	}
}

function clade_subscriptions_grant_roles(&$account) {
	$clade = clade_get_context();
	if (! empty($clade)) {
		if (in_array($clade->tid, array_keys($account->clades))) {
			$role_names = array('clade member');
			if ($account->clades[$clade->tid]['is_admin']) {
				$role_names[] = 'clade manager';
			}
			$in = array_fill(0, count($role_names), '%s');
			$results = db_query("SELECT * FROM {role} WHERE name IN ('" . implode("','", $in) . "')", $role_names);
			while ($r = db_fetch_object($results)) {
				$account->roles[$r->rid] = $r->name;
			}
			// reload user roles
			user_access(NULL, $account, TRUE);
		}
	}
}

function clade_subscriptions_get_subscriptions($uid, $reset = FALSE) {
  static $subscriptions = array();

  if ($reset) {
    unset($subscriptions[$uid]);
  }

  if (!isset($subscriptions[$uid])) {
    $sql = "SELECT t.name, cu.* FROM {clade_uid} cu INNER JOIN {term_data} t ON cu.tid = t.tid WHERE cu.uid = %d ORDER BY t.name";
    $result = db_query($sql, $uid);
    while ($row = db_fetch_array($result)) {
      $subscriptions[$uid][$row['tid']] = $row;
    }

    if (!isset($subscriptions[$uid])) {
      $subscriptions[$uid] = array();
    }
  }
  return $subscriptions[$uid];
}

function clade_subscriptions_access_create_admin($clade_id, $account) {
	global $user;
	$clade = clade_get_clade($clade_id);
	$members = clade_subscriptions_clade_members($clade);
	$access = FALSE;
	// only members can become admins through this method
	if (in_array($account->uid, $members)) {
		$admins = clade_subscriptions_clade_admins($clade);
		// only non-admins can become admins
		if (! in_array($account->uid, $admins)) {
			// only clade admins or site admins can create admins
			$access = in_array($user->uid, $admins) || user_access('edit any clade');
		}
	}
	return $access;
}

function clade_subscriptions_create_admin($form_state, $clade_id, $account) {
	$clade = clade_get_clade($clade_id);
	$form = array();
	$form['clade'] = array('#type' => 'value', '#value' => $clade);
	$form['account'] = array('#type' => 'value', '#value' => $account);
	$form['details'] = array(
		'#type' => 'markup',
		'#value' => '<p>' . t('This will grant all Clade management privileges to !user.  This includes managing members and the ability to edit the details of the Clade.  Only a site administrator can revoke Clade management privileges.', array('!user' => theme('username', $account))) . '</p>',
		);
	return confirm_form($form,
							t("Are you sure you want grant the role of %role for %title to !user?", array('!user' => theme('username', $account), '%title' => $clade->name, '%role' => t('Clade manager'))),
							'clade/'. $clade->tid, ' ',
							t('Grant manager'), t('Cancel'));
}

function clade_subscriptions_create_admin_submit($form, &$form_state) {
	$account = $form_state['values']['account'];
	$clade = $form_state['values']['clade'];
	$clade_uid_record = db_fetch_object(db_query("SELECT * FROM {clade_uid} WHERE tid = %d AND uid = %d", $clade->tid, $account->uid));
	$clade_uid_record->is_admin = TRUE;
	if (drupal_write_record('clade_uid', $clade_uid_record, array('tid', 'uid'))) {
		drupal_set_message(t('!user is now a %role for %clade.', array('%role' => t('Clade manager'), '%clade' => $clade->name, '!user' => theme('username', $account))));
	} else {
		drupal_set_message(t('There was an error granting %role for %clade to !user.  Please try again.', array('%role' => t('Clade manager'), '%clade' => $clade->name, '!user' => theme('username', $account))), 'error');
	}
}

function clade_subscriptions_access_remove_admin($clade_id, $account) {
	global $user;
	$clade = clade_get_clade($clade_id);
	$admins = clade_subscriptions_clade_admins($clade);
	$access = FALSE;

}

function clade_subscriptions_remove_admin($form_state, $clade_id, $account) {
	$clade = clade_get_clade($clade_id);
	$form = array();
	$form['clade'] = array('#type' => 'value', '#value' => $clade);
	$form['account'] = array('#type' => 'value', '#value' => $account);
	$form['details'] = array(
		'#type' => 'markup',
		'#value' => '<p>' . t('This will remove all Clade management privileges from !user.  The user will still be a member of the Clade.  If you wish to remove membership as well, you will need to do that after removing management privileges.', array('!user' => theme('username', $account))) . '</p>',
		);
	return confirm_form($form,
							t("Are you sure you want remove the role of %role of %title from !user?", array('!user' => theme('username', $account), '%title' => $clade->name, '%role' => t('Clade manager'))),
							'clade/'. $clade->tid, ' ',
							t('Remove manager'), t('Cancel'));
}

function clade_subscriptions_remove_admin_submit($form, &$form_state) {
	$account = $form_state['values']['account'];
	$clade = $form_state['values']['clade'];
	$clade_uid_record = db_fetch_object(db_query("SELECT * FROM {clade_uid} WHERE tid = %d AND uid = %d", $clade->tid, $account->uid));
	$clade_uid_record->is_admin = FALSE;
	if (drupal_write_record('clade_uid', $clade_uid_record, array('tid', 'uid'))) {
		drupal_set_message(t('!user has been removed from @clade managers.', array('!user' => theme('username', $account), '@clade' => $clade->name)));
	} else {
		drupal_set_message(t('There was an error removing !user from @clade managers.  Please try again.', array('!user' => theme('username', $account), '@clade' => $clade->name)));
	}
}

function clade_subscriptions_profile_alter(&$account) {
	$communities = array();
	foreach ($account->clades as $clade) {
		$tid = $clade['tid'];
		$name = $clade['name'];
		if ($clade['is_admin']) {
			$name .= "*";
		}
		$communities[] = l($name, "clade/$tid");
	}
	if ($communities) {
		$account->content['Communities'] = array(
			'#type'=>'user_profile_category',
			'#title' => t('Crop Community Memberships'),
			'communities' => array('#type' => 'user_profile_item', '#value' => implode(', ', $communities)),
			'#weight' => 20,
		);
	}
}
