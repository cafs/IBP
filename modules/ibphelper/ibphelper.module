<?php
// $Id$
// IBP Helper Module
//

function ibphelper_perm() {
	return array(
		'admin ibphelper',
		'access ibp tool development files',
		);
}

function ibphelper_menu() {
	return array(
// 		'admin/settings/ibphelper' => array(
// 			'access arguments' => array('admin ibphelper'),
// 			'page callback' => 'drupal_get_form',
// 			'page arguments' => array('ibphelper_admin_form'),
// 			'title' => 'IBP Helper',
// 		),
		'user/my-ibp-pages' => array(
			'access callback' => 'ibphelper_my_pages_access',
			'page callback' => 'ibphelper_my_pages',
			'title' => 'My Saved Pages',
			'type' => MENU_NORMAL_ITEM,
			'menu_name' => 'menu-my-links',
		),
// 		'training/%' => array(
// 			'access arguments' => array('access content'),
// 			'page callback' => 'ibphelper_ibp_training',
// 			'page arguments' => array(1),
// 			'title callback' => 'ibphelper_ibp_training_title',
// 			'title arguments' => array(1),
// 		),
		'clade/%clade/crop-information' => array(
			'type' => MENU_LOCAL_TASK,
			'weight' => 25,
			'title' => 'Crop information',
			'page callback' => 'ibphelper_crop_info',
			'page arguments' => array(1),
			'access callback' => 'ibphelper_crop_info_access',
			'access arguments' => array(1),
		),
		'node/%node/query' => array(
			'type' => MENU_LOCAL_TASK,
			'weight' => 25,
			'title' => 'Query Interface',
			'page callback' => 'ibphelper_crop_info_query',
			'page arguments' => array(1),
			'access callback' => 'ibphelper_crop_info_query_access',
			'access arguments' => array(1),
		),
	);
}

function ibphelper_menu_alter(&$items)
{
  unset($items['user/%user/imce']);
  unset($items['clade/%clade/help']);
}

function ibphelper_theme() {
	return array(
		'ibp_my_pages' => array(
			'arguments' => array('mypages' => NULL),
			'template' => 'theme/my-pages',
			),
		);
}

function ibphelper_my_pages_access() {
	global $user;
	return $user->uid;
}

function ibphelper_my_pages() {
	global $user;
	if ($user->uid) {
		if ($user->ibp_pages) {
			$account = $user;
		} else {
			$account = user_load($user->uid);
		}
		$pages = array();
		foreach ($account->ibp_pages as $page) {
			$pages[] = t('!link (@url)', array('!link' => l($page->title, $page->url), '@url' => url($page->url, array('absolute'=>TRUE))));
		}
		if ($pages) {
			$mypages = theme('item_list', $pages, NULL, 'ul', array('class' => 'ibp-my-pages'));
		}
		return theme('ibp_my_pages', $mypages);
	}
}

// function ibphelper_admin_form() {
// 	$form = array();
// 	
// 	$vocs = taxonomy_get_vocabularies();
// 	$options = array(t('Choose one'));
// 	foreach ($vocs as $voc) {
// 		$options[$voc->vid] = $voc->name;
// 	}
// 	
// 	$form['ibphelper_tools_vocabulary'] = array(
// 		'#title' => t('IB Tools Vocabulary'),
// 		'#description' => t('Select the Vocabulary to use in the IB Tools Navigation Menu block'),
// 		'#type' => 'select',
// 		'#options' => $options,
// 		'#default_value' => variable_get('ibphelper_tools_vocabulary', 0),
// 		);
// 	
// 	return system_settings_form($form);
// }
// 
// function ibphelper_block($op = 'list', $delta = 0, $edit = array()) {
// 	$block = array();
// 	if ($op == 'list') {
// 		$block[0] = array(
// 			'info' => t('IB Tools Navigation Menu')
// 			);
// 		$block[1] = array(
// 			'info' => t('IBP Training Navigation Menu')
// 			);
// 	} else if ($op == 'view') {
// 		switch ($delta) {
// 		case 0 :
// 			drupal_add_js(drupal_get_path('module', 'ibphelper') . '/js/ibp-nav-menu.js');
// 			drupal_add_css(drupal_get_path('module', 'ibphelper') . '/css/ibp-nav-menu.css');
// 			$block['subject'] = t('IB Tools');
// 			
// 			if ($vid = variable_get('ibphelper_tools_vocabulary', 0)) {			
// 				$block['content'] = ibphelper_ibtools_nav_menu();
// 			}
// 			break;
// 
// 		case 1 :
// 			drupal_add_css(drupal_get_path('module', 'ibphelper') . '/css/ibp-nav-menu.css');
// 			$block['subject'] = t('Training navigation');
// 			if ($vid = variable_get('clade_vocabulary', 0)) {
// 				$tree = taxonomy_get_tree($vid);
// 				$items = array();
// 				$cur = arg(2);
// 				foreach ($tree as $term) {
// 					$item = array(
// 						'data' => l($term->name, "training/".arg(1)."/$term->tid"),
// 						);
// 					if ($cur == $term->tid) {
// 						$item['class'] = 'active';
// 					}
// 					$items[] = $item;
// 				}
// 				$block['content'] = theme("item_list", $items, NULL, 'ul', array('class' => 'ibp_training_menu'));
// 			}
// 			break;
// 		}
// 	}
// 	return $block;
// }
// 
// function ibphelper_ibtools_nav_menu($pid = 0) {
// 	$menu = taxonomy_get_tree(variable_get('ibphelper_tools_vocabulary', 0), $pid, -1, 1);
// 	$items = array();
// 	foreach ($menu as $m) {
// 		$item = l($m->name, "taxonomy/term/$m->tid");
// 		if ($subitems = ibphelper_ibtools_nav_menu($m->tid)) {
// 			$item .= $subitems;
// 		}
// 		$items[] = array('data' => $item, 'class' => $pid ? 'ibtools_nav_submenu_item' : 'ibtools_nav_menu_item', 'title' => $m->description);
// 	}
// 	return theme('item_list', $items, NULL, 'ul', array('class' => $pid ? 'ibtools_nav_submenu' : 'ibtools_nav_menu'));
// }

function ibphelper_nodeapi(&$node, $op, $teaser, $page) {
	if ($op == 'view') {
		if ($node->type == 'forum' && isset($node->content['forum_navigation'])) {
			$node->forum_navigation = $node->content['forum_navigation'];
			unset($node->content['forum_navigation']);
		}
		else if ($node->type == 'crop_info_page') {
			menu_set_active_item("node/$node->nid");
		}
	} else if ($op == 'insert' || $op == 'update') {
		if ($node->type == 'training_page') {
			// create path alias
			module_load_include('inc', 'pathauto', 'pathauto');
			$path = "node/$node->nid";
			$path_parts = array('training');
			foreach ($node->taxonomy as $vid => $term) {
				if ($vid == variable_get('clade_vocabulary',0)) {
					$crops = array();
					foreach ($term as $cropid) {
						$crop = taxonomy_get_term($cropid);
						$crops[] = $crop->name;
					}
					$path_parts[2] = pathauto_cleanstring(implode('-', $crops));
				} else {
					$term = taxonomy_get_term($term);
					$path_parts[1] = pathauto_cleanstring($term->name);
				}
				$path_parts[4] = pathauto_cleanstring($node->title);
			}
			ksort($path_parts);
			path_set_alias("node/$node->nid",implode("/",$path_parts));
		}
	} else if ($op == 'delete') {
		if ($node->type == 'training_page') {
			// delete path alias
			path_set_alias('node/'.$node->nid);
		}
	}
}

function ibphelper_hook_info() {
	return array(
		'ibphelper' => array(
			'ibphelper' => array(
				'user_register' => array(
					'runs when' => t('User registration page is viewed by anonymous user.'),
					),
				),
			),
		);
}

function ibphelper_action_info_alter(&$info) {
  if (isset($info['system_goto_action']['hooks'])) {
    $info['system_goto_action']['hooks']['ibphelper'] = array('user_register');
  }
}

function ibphelper_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_register') {
		if ($aids = _trigger_get_hook_aids('ibphelper', $form_id)) {
			$context = array(
				'hook' => 'ibphelper',
				'op' => $form_id,
			);
			$dummy = new stdClass();
			foreach ($aids as $aid => $action_info) {
				actions_do($aid, $dummy, $context);
			}
		}
	} else if ($form_id == 'user_profile_form') {
		$form['account']['name']['#attributes']['readonly'] = 'readonly';
		$form['account']['name']['#value'] = $form['account']['name']['#default_value'];
		$form['account']['mail']['#attributes']['readonly'] = 'readonly';
		$form['account']['mail']['#value'] = $form['account']['mail']['#default_value'];

		unset(
			$form['account']['name']['#description'],
			$form['account']['mail']['#description'],
			$form['account']['pass']
		);
		
		$info = <<<info
		<div class="status">
			The Integrated Breeding Platform takes advantage of iPlant central authentication.
		</div>
		<div class="status">
			To make changes to your username and/or email address, you must send an email to
			<a href="mailto:support@iplantcollaborative.org?subject=Request change to iPlant account information">support@iplantcollaborative.org</a>
			and request the change.
		</div>
		<div class="status">
			To change you password, please submit an <a href="https://auth.iplantcollaborative.org/account_management/request_reset.py">iPlant password reset request</a>.
		</div>
info;
		$form['account']['info'] = array(
			'#value' => $info,
			'#weight' => 1,
		);
		
		$form['account']['status']['#weight'] = 5;
		$form['account']['roles']['#weight'] = 5;
	} else if ($form_id == 'contact_mail_user') {
		global $user;
		drupal_set_title('Contact ' . $user->profile_first_name . ' ' . $user->profile_last_name);
	} else if ($form_id == 'clade_page_node_form') {
		$form['#after_build'][] = 'ibphelper_clade_page_node_form_after_build';
	} else if ($form_id == 'ibp_tool_node_form') {
		foreach ($form['taxonomy'] as $vid => $field) {
			if ($field['#title'] == 'IBP tools category') {
				$form['taxonomy'][$vid]['#required'] = 1;
			}
		}
//	} else if ($form_id == 'profile_node_form') {
	} else if ($form_id == 'crop_homepage_node_form') {
		if ($clade_id = $_GET['clades']) {
			$clade = clade_get_clade($clade_id);
			$clade_vid = variable_get('clade_vocabulary',0);
			$form['taxonomy'][$clade_vid]['#default_value'] = array($clade->tid);
			$form['taxonomy'][$clade_vid]['#value'] = array($clade->tid);
			$form['taxonomy'][$clade_vid]['#type'] = 'value';
			unset($form['taxonomy'][$clade_vid]['#options'],$form['taxonomy'][$clade_vid]['#theme']);
		}
		unset($form['menu']);
	}
}

function ibphelper_clade_page_node_form_after_build($form, &$form_state) {
	if ($form['group_image_info']['field_clade_image'][0]['#default_value']['fid']) {
		$form['group_image_info']['#collapsed'] = 0;
	}
	if ($form['group_file_info']['field_clade_file'][0]['#default_value']['fid']) {
		$form['group_file_info']['#collapsed'] = 0;
	}
	return $form;
}

// function ibphelper_link_alter(&$links, $node, $comment = NULL) {
// }

function ibphelper_preprocess_page(&$vars) {
	global $user;
	if ($user->uid) {
		$vars['my_pages_form'] = drupal_get_form('ibphelper_my_pages_form', $user, ibphelper_user_page_by_url($user->uid, $_GET['q']));
	}
}

function ibphelper_user_page_by_url($uid, $url) {
	$sql = "SELECT pid FROM ibphelper_user_pages WHERE uid = %d and url = '%s'";
	if ($result = db_result(db_query($sql, $uid, $url))) {
		return $result;
	}
	return 0;
}

function ibphelper_my_pages_form(&$form_state, $user, $pid) {
	$form = array();
	$form['pid'] = array(
		'#type' => 'hidden',
		'#value' => $pid
		);
	$form['title'] = array(
		'#type' => 'hidden',
		'#value' => drupal_get_title(),
		);
	$form['url'] = array(
		'#type' => 'hidden',
		'#value' => $_GET['q'],
		);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => $pid ? t('Remove from My Pages') : t('Save to My Pages'),
		'#attributes' => array('class' => $pid ? 'ibphelper-my-pages-remove' : 'ibphelper-my-pages-add'),
		);
	return $form;
}

function ibphelper_my_pages_form_submit($form, &$form_state) {
	global $user;
	if ($user->uid) {
		if ($pid = $form_state['values']['pid']) {
			$page = new stdClass;
			$page->pid = $pid;
			$page->title = $form_state['values']['title'];
			$page->url = $form_state['values']['url'];
			$page->deleted = TRUE;
			$user->ibp_pages[$pid] = $page;
			user_save($user);
			drupal_set_message(t('The page !page has been removed from !your_pages.', array('!page' => l($page->title, $page->url), '!your_pages' => l(t('My Saved Pages'), "user/$user->uid/my-ibp-pages"))));
		} else {
			$page = new stdClass;
			$page->uid = $user->uid;
			$page->title = $form_state['values']['title'];
			$page->url = $form_state['values']['url'];
			$user->ibp_pages[] = $page;
			user_save($user);
			drupal_set_message(t('The page !page has been saved to !your_pages.', array('!page' => l($page->title, $page->url), '!your_pages' => l(t('My Saved Pages'), "user/$user->uid/my-ibp-pages"))));
		}
	}
}

function ibphelper_user($op, &$edit, &$account, $category = NULL) {
	if ($account->uid) {
		if ($op == "load") {
			$account->ibp_pages = array();
			$sql = "SELECT pid, uid, title, url FROM ibphelper_user_pages WHERE uid = %d";
			$pages = db_query($sql, $account->uid);
			while ($page = db_fetch_object($pages)) {
				$account->ibp_pages[$page->pid] = $page;
			}
			if (module_exists('content_profile')) {
				$profile = content_profile_load('profile', $account->uid);
				$account->profile = $profile;
			}
		} else if ($op == "after_update") {
			if (module_exists('content_profile') && (!$account->profile || ! $account->profile->nid)) {
				_ibphelper_ldap_create_profile($account);
			}
		} else if ($op == "save" || $op == "update") {
			if ($account->ibp_pages) {
				foreach ($account->ibp_pages as $page) {
					if ($page->pid) {
						if ($page->deleted) {
							db_query("DELETE FROM ibphelper_user_pages WHERE pid = %d", $page->pid);
						} else {
							drupal_write_record('ibphelper_user_pages', $page, array('pid'));
						}
					} else {
						$page->uid = $account->uid;
						drupal_write_record('ibphelper_user_pages', $page);
					}
				}
			}
		} else if ($op == "delete") {
			$sql = "DELETE FROM ibphelper_user_pages WHERE uid = %d";
			db_query($sql, $account->uid);
		}
	}
}

/*
 * This is inspired by the ldapdata sync methods, but that only works with profiles, not content profiles.
 * Another option, possibly for the future, is in this thread:
 * http://drupal.org/node/646640
 * http://drupal.org/files/issues/646640-27.patch
 */
function _ibphelper_ldap_create_profile(&$account) {
	if (module_exists('ldapdata') && module_exists('content_profile')) {
		global $_ldapdata_ldap;

		// Setup the global $_ldapdata_ldap object.
		if (!_ldapdata_init($account))
			return;
		// See http://drupal.org/node/91786 about user_node().
		// User can be edited by the user or by other authorized users.
		$authmap = user_get_authmaps($account->name);
		if (!isset($authmap['ldapauth']) || (_ldapdata_ldap_info($account, 'mapping_type') == LDAPDATA_MAP_NOTHING)) {
			return;
		}
		$bind_info = _ldapdata_edition($account);
		if (!$_ldapdata_ldap->connect($bind_info['dn'], $bind_info['pass'])) {
			watchdog('ldapdata', "User load: user %name's data could not be read in the LDAP directory", array('%name' => $account->name), WATCHDOG_WARNING);
			return;
		}
		if ($entry = $_ldapdata_ldap->retrieveAttributes($account->ldap_dn)) {
			$fn = @$entry['givenname'][0];
			$ln = @$entry['sn'][0];
			if ($fn && $ln) {
				drupal_set_message("Welcome to the Integrated Breeding Platform, $fn $ln!");
				if (module_exists('content_profile')) {
					$profile = content_profile_load('profile', $account->uid);
					if (! $profile) {
						$profile = new stdClass;
						$profile->type = 'profile';
						$profile->uid = $account->uid;
					}
					$profile->field_profile_first_name[0]['value'] = $fn;
					$profile->field_profile_last_name[0]['value'] = $ln;
					node_save($profile);
				}
			}
		}
	}
}

function ibphelper_imagecache_default_presets() {
	$presets = array();
	$presets['profile_normal'] = array (
		'presetname' => 'profile_normal',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale',
				'data' => 
				array (
					'width' => '200',
					'height' => '200',
					'upscale' => 0,
				),
			),
		),
	);
	$presets['profile_medium'] = array (
		'presetname' => 'profile_medium',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '64',
					'height' => '64',
				),
			),
		),
	);
	$presets['profile_small'] = array (
		'presetname' => 'profile_small',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '30',
					'height' => '30',
				),
			),
		),
	);
	$presets['profile_tiny'] = array (
		'presetname' => 'profile_tiny',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '24',
					'height' => '24',
				),
			),
		),
	);
	
	$presets['tool_screenshot_small'] = array (
		'presetname' => 'tool_screenshot_small',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '85',
					'height' => '56',
				),
			),
		),
	);
	$presets['tool_screenshot_preview'] = array (
		'presetname' => 'tool_screenshot_preview',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '300',
					'height' => '200',
				),
			),
		),
	);
	$presets['tool_screenshot_zoom'] = array (
		'presetname' => 'tool_screenshot_zoom',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale',
				'data' => 
				array (
					'width' => '1024',
					'height' => '768',
					'upscale' => 0,
				),
			),
		),
	);
	
	return $presets;
}

// function ibphelper_taxonomy($op, $type, $array = NULL) {
// 	if ($type == "term") {
// 		$vocabulary = taxonomy_vocabulary_load($array['vid']);
// 		if ($vocabulary->name == 'Training types') {
// 			module_load_include('inc', 'pathauto', 'pathauto');
// 			switch ($op) {
// 				case "insert":
// 					// create path alias
// 					$alias = 'training/'.pathauto_cleanstring($array['name']);
// 					path_set_alias('training/'.$array['tid'],$alias);
// 					break;
// 				
// 				case "update":
// 					// update path alias
// 					path_set_alias('training/'.$array['tid']); // delete old path
// 					$alias = 'training/'.pathauto_cleanstring($array['name']);
// 					path_set_alias('training/'.$array['tid'], $alias);
// 					break;
// 					
// 				case "delete":
// 					// delete path alias
// 					path_set_alias('training/'.$array['tid']);
// 					break;	
// 			}
// 		}
// 	}
// }
// 
// function ibphelper_ibp_training($category, $crop = NULL) {
// 	$args = array($category);
// 	if ($crop) {
// 		$args[] = $crop;
// 	}
// 	$view = views_get_view('training');
// 	$output = $view->preview('default', $args);
// 	if ($view->result) {
// 		return $output;
// 	} else {
// 		return "<h3>".t('No training materials available.')."</h3>";
// 	}
// }
// 
// function ibphelper_ibp_training_title($category) {
// 	return taxonomy_get_term($category)->name;
// }
// 
// function ibphelper_taxonomy_menu_path() {
// 	$output = array(
// 		'ibphelper_taxonomy_menu_path_custom' => t('IBP Custom'),
// 		);
// 	return $output;
// }
// 
// function ibphelper_taxonomy_menu_path_custom($vid,$tid) {
// 	$vocabulary = taxonomy_vocabulary_load($vid);
// 	if ($vocabulary->name == 'Training types') {
// 		return "training/$tid";
// 	} else {
// 		return taxonomy_term_path(taxonomy_get_term($tid));
// 	}
// }

function ibphelper_views_api() {
  return array('api' => 2.0);
}

// ctools integrations
function ibphelper_ctools_plugin_api($module, $api) {
  if (
  	($module == 'ctools' && !empty($plugin)) ||
  	($module == 'page_manager' && !empty($plugin))
  )
  {
    return array('version' => 1);
  }  
}

// Implementation of hook_ctools_plugin_directory()
function ibphelper_ctools_plugin_directory($module, $plugin) {
  if (
  	($module == 'ctools' && !empty($plugin)) ||
  	($module == 'page_manager' && !empty($plugin))
  )
  {
    return "ctools_plugins/$plugin";
  }
}

function ibphelper_crop_info_access($crop) {
	if (drupal_lookup_path('source', "crop-information/$crop->name")) {
		return TRUE;
	}
	return FALSE;
}

function ibphelper_crop_info($crop) {
	drupal_goto("crop-information/$crop->name");
}

function ibphelper_crop_info_query($node) {
	return '<script>$(document).ready(function() {window.open(\''. $node->field_query_url[0]['url'] .'\');});</script>'.node_page_view($node);
}

function ibphelper_crop_info_query_access($node) {
	if ($node->type == 'crop_info_page') {
		if (! empty($node->field_query_url[0]['url'])) {
			return TRUE;
		}
	}
	return FALSE;
}

function ibphelper_clade($op, $clade = NULL) {
	if ($op == 'clade insert') {
		$clade_menu = menu_get_item("clade/$clade->tid");
		$menu = array(
			'menu_name' => 'primary-links',
			'plid' => $clade_menu['mlid'],
			'router_path' => 'clade/%/digest',
			'link_path' => "clade/$clade->tid/digest",
			'link_title' => $clade->name . ' digest',
			'weight' => 10,
			);
		menu_link_save($menu);
		$menu = array(
			'menu_name' => 'primary-links',
			'plid' => $clade_menu['mlid'],
			'router_path' => 'clade/%/blog',
			'link_path' => "clade/$clade->tid/blog",
			'link_title' => $clade->name . ' blog',
			'weight' => 11,
			);
		menu_link_save($menu);
		$menu = array(
			'menu_name' => 'primary-links',
			'plid' => $clade_menu['mlid'],
			'router_path' => 'clade/%/forums',
			'link_path' => "clade/$clade->tid/forums",
			'link_title' => $clade->name . ' forum',
			'weight' => 12,
			);
		menu_link_save($menu);
	}
	// TODO delete?
}

function ibphelper_clade_details_items($clade) {
	return array(
		'blog_page' => array(
			'data' => l(t('Blogs'), sprintf('clade/%d/blog', $clade->tid)),
			'data-sort' => 1,
			'class' => 'clade-details-item',
			),
		);
}

function ibphelper_profile_alter(&$account) {
	unset($account->content['summary'], $account->content['LDAP authentication']);
	if (module_exists('content_profile')) {
		$content_profile = &$account->content['content_profile'];
		if ($content_profile['content_profile_profile']['#theme'] == 'content_profile_display_add_link') {
			$content_profile['#prefix'] = '<div id="content-profile-view" class="profile-category"><div>';
			$content_profile['#suffix'] = '</div></div>';
			$content_profile['#weight'] = 100;
		} else {
			unset($account->content['Profile Information']);
			$content_profile['#weight'] = 0;
		}
		unset($content_profile['content_profile_profile']['#prefix'], $content_profile['content_profile_profile']['#suffix']);
	}
}