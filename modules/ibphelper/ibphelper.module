<?php
// $Id$
// IBP Helper Module
//

function ibphelper_perm() {
	return array(
		'admin ibphelper',
		);
}

function ibphelper_menu() {
	return array(
		'admin/settings/ibphelper' => array(
			'access arguments' => array('admin ibphelper'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('ibphelper_admin_form'),
			'title' => 'IBP Helper',
			),
		'user/%user/my-ibp-pages' => array(
			'access callback' => 'ibphelper_my_pages_access',
			'page callback' => 'ibphelper_my_pages',
			'title' => 'My Saved Pages'
			),
		'training/%' => array(
			'access arguments' => array('access content'),
			'page callback' => 'ibphelper_ibp_training',
			'page arguments' => array(1),
			'title callback' => 'ibphelper_ibp_training_title',
			'title arguments' => array(1),
			),
		);
}

function ibphelper_theme() {
	return array(
		'ibp_my_pages' => array(
			'arguments' => array('mypages' => NULL),
			'template' => 'theme/my-pages',
			),
		);
}

function ibphelper_my_pages_access() {
	global $user;
	return $user->uid;
}

function ibphelper_my_pages() {
	global $user;
	if ($user->uid) {
		if ($user->ibp_pages) {
			$account = $user;
		} else {
			$account = user_load($user->uid);
		}
		$pages = array();
		foreach ($account->ibp_pages as $page) {
			$pages[] = l($page->title, $page->url);
		}
		if ($pages) {
			$mypages = theme('item_list', $pages, NULL, 'ul', array('class' => 'ibp-my-pages'));
		}
		return theme('ibp_my_pages', $mypages);
	}
}

function ibphelper_admin_form() {
	$form = array();
	
	$vocs = taxonomy_get_vocabularies();
	$options = array(t('Choose one'));
	foreach ($vocs as $voc) {
		$options[$voc->vid] = $voc->name;
	}
	
	$form['ibphelper_tools_vocabulary'] = array(
		'#title' => t('IB Tools Vocabulary'),
		'#description' => t('Select the Vocabulary to use in the IB Tools Navigation Menu block'),
		'#type' => 'select',
		'#options' => $options,
		'#default_value' => variable_get('ibphelper_tools_vocabulary', 0),
		);
	
	return system_settings_form($form);
}

function ibphelper_block($op = 'list', $delta = 0, $edit = array()) {
	$block = array();
	if ($op == 'list') {
		$block[0] = array(
			'info' => t('IB Tools Navigation Menu')
			);
		$block[1] = array(
			'info' => t('IBP Training Navigation Menu')
			);
	} else if ($op == 'view') {
		switch ($delta) {
		case 0 :
			drupal_add_js(drupal_get_path('module', 'ibphelper') . '/js/ibp-nav-menu.js');
			drupal_add_css(drupal_get_path('module', 'ibphelper') . '/css/ibp-nav-menu.css');
			$block['subject'] = t('IB Tools');
			
			if ($vid = variable_get('ibphelper_tools_vocabulary', 0)) {			
				$block['content'] = ibphelper_ibtools_nav_menu();
			}
			break;

		case 1 :
			drupal_add_css(drupal_get_path('module', 'ibphelper') . '/css/ibp-nav-menu.css');
			$block['subject'] = t('Training navigation');
			if ($vid = variable_get('clade_vocabulary', 0)) {
				$tree = taxonomy_get_tree($vid);
				$items = array();
				$cur = arg(2);
				foreach ($tree as $term) {
					$item = array(
						'data' => l($term->name, "training/".arg(1)."/$term->tid"),
						);
					if ($cur == $term->tid) {
						$item['class'] = 'active';
					}
					$items[] = $item;
				}
				$block['content'] = theme("item_list", $items, NULL, 'ul', array('class' => 'ibp_training_menu'));
			}
			break;
		}
	}
	return $block;
}

function ibphelper_ibtools_nav_menu($pid = 0) {
	$menu = taxonomy_get_tree(variable_get('ibphelper_tools_vocabulary', 0), $pid, 0);
	$items = array();
	foreach ($menu as $m) {
		$item = l($m->name, "taxonomy/term/$m->tid");
		if ($subitems = ibphelper_ibtools_nav_menu($m->tid)) {
			$item .= $subitems;
		}
		$items[] = array('data' => $item, 'class' => $pid ? 'ibtools_nav_submenu_item' : 'ibtools_nav_menu_item');
	}
	return theme('item_list', $items, NULL, 'ul', array('class' => $pid ? 'ibtools_nav_submenu' : 'ibtools_nav_menu'));
}

function ibphelper_nodeapi(&$node, $op, $teaser, $page) {
	if ($op == 'view') {
		if ($node->type == 'ibp_tool') {
			drupal_add_css(drupal_get_path('module', 'ibphelper') . '/css/ibp-tool.css');
		}
		// remove forum navigation stuff
		else if ($node->type == 'forum' && isset($node->content['forum_navigation'])) {
			$node->forum_navigation = $node->content['forum_navigation'];
			unset($node->content['forum_navigation']);
		}
	} else if ($op == 'insert' || $op == 'update') {
		if ($node->type == 'training_page') {
			// create path alias
			module_load_include('inc', 'pathauto', 'pathauto');
			$path = "node/$node->nid";
			$path_parts = array('training');
			foreach ($node->taxonomy as $vid => $term) {
				if ($vid == variable_get('clade_vocabulary',0)) {
					$crops = array();
					foreach ($term as $cropid) {
						$crop = taxonomy_get_term($cropid);
						$crops[] = $crop->name;
					}
					$path_parts[2] = pathauto_cleanstring(implode('-', $crops));
				} else {
					$term = taxonomy_get_term($term);
					$path_parts[1] = pathauto_cleanstring($term->name);
				}
				$path_parts[4] = pathauto_cleanstring($node->title);
			}
			ksort($path_parts);
			path_set_alias("node/$node->nid",implode("/",$path_parts));
		}
	} else if ($op == 'delete') {
		if ($node->type == 'training_page') {
			// delete path alias
			path_set_alias('node/'.$node->nid);
		}
	}
}

function ibphelper_hook_info() {
	return array(
		'ibphelper' => array(
			'ibphelper' => array(
				'user_register' => array(
					'runs when' => t('User registration page is viewed by anonymous user.'),
					),
				),
			),
		);
}

function ibphelper_action_info_alter(&$info) {
  if (isset($info['system_goto_action']['hooks'])) {
    $info['system_goto_action']['hooks']['ibphelper'] = array('user_register');
  }
}

function ibphelper_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_register') {
		if ($aids = _trigger_get_hook_aids('ibphelper', $form_id)) {
			$context = array(
				'hook' => 'ibphelper',
				'op' => $form_id,
			);
			$dummy = new stdClass();
			foreach ($aids as $aid => $action_info) {
				actions_do($aid, $dummy, $context);
			}
		}
	} else if ($form_id == 'contact_mail_user') {
		global $user;
		drupal_set_title('Contact ' . $user->profile_first_name . ' ' . $user->profile_last_name);
	}
}

// function ibphelper_link_alter(&$links, $node, $comment = NULL) {
// }

function ibphelper_preprocess_page(&$vars) {
	global $user;
	if ($user->uid) {
		$vars['my_pages_form'] = drupal_get_form('ibphelper_my_pages_form', $user, ibphelper_user_page_by_url($user->uid, $_GET['q']));
	}
}

function ibphelper_user_page_by_url($uid, $url) {
	$sql = "SELECT pid FROM ibphelper_user_pages WHERE uid = %d and url = '%s'";
	if ($result = db_result(db_query($sql, $uid, $url))) {
		return $result;
	}
	return 0;
}

function ibphelper_my_pages_form(&$form_state, $user, $pid) {
	$form = array();
	$form['pid'] = array(
		'#type' => 'hidden',
		'#value' => $pid
		);
	$form['title'] = array(
		'#type' => 'hidden',
		'#value' => drupal_get_title(),
		);
	$form['url'] = array(
		'#type' => 'hidden',
		'#value' => $_GET['q'],
		);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => $pid ? t('Remove from My Pages') : t('Save to My Pages'),
		'#attributes' => array('class' => $pid ? 'ibphelper-my-pages-remove' : 'ibphelper-my-pages-add'),
		);
	return $form;
}

function ibphelper_my_pages_form_submit($form, &$form_state) {
	global $user;
	if ($user->uid) {
		if ($pid = $form_state['values']['pid']) {
			$page = new stdClass;
			$page->pid = $pid;
			$page->title = $form_state['values']['title'];
			$page->url = $form_state['values']['url'];
			$page->deleted = TRUE;
			$user->ibp_pages[$pid] = $page;
			user_save($user);
			drupal_set_message(t('The page !page has been removed from !your_pages.', array('!page' => l($page->title, $page->url), '!your_pages' => l(t('My Saved Pages'), "user/$user->uid/my-ibp-pages"))));
		} else {
			$page = new stdClass;
			$page->uid = $user->uid;
			$page->title = $form_state['values']['title'];
			$page->url = $form_state['values']['url'];
			$user->ibp_pages[] = $page;
			user_save($user);
			drupal_set_message(t('The page !page has been saved to !your_pages.', array('!page' => l($page->title, $page->url), '!your_pages' => l(t('My Saved Pages'), "user/$user->uid/my-ibp-pages"))));
		}
	}
}

function ibphelper_user($op, &$edit, &$account, $category = NULL) {
	if ($account->uid) {
		if ($op == "load") {
			$account->ibp_pages = array();
			$sql = "SELECT pid, uid, title, url FROM ibphelper_user_pages WHERE uid = %d";
			$pages = db_query($sql, $account->uid);
			while ($page = db_fetch_object($pages)) {
				$account->ibp_pages[$page->pid] = $page;
			}
		} else if ($op == "save" || $op == "update") {
			if ($account->ibp_pages) {
				foreach ($account->ibp_pages as $page) {
					if ($page->pid) {
						if ($page->deleted) {
							db_query("DELETE FROM ibphelper_user_pages WHERE pid = %d", $page->pid);
						} else {
							drupal_write_record('ibphelper_user_pages', $page, array('pid'));
						}
					} else {
						$page->uid = $account->uid;
						drupal_write_record('ibphelper_user_pages', $page);
					}
				}
			}
		} else if ($op == "delete") {
			$sql = "DELETE FROM ibphelper_user_pages WHERE uid = %d";
			db_query($sql, $account->uid);
		}
	}
}

function ibphelper_clade($op, $clade) {
	if ($op == 'clade insert') {
		$clade_menu = menu_get_item("clade/$clade_tid");
		$menu = array(
			'menu_name' => 'primary-links',
			'plid' => $clade_menu['mlid'],
			'router_path' => 'clade/%/forums',
			'link_path' => "clade/$clade->tid/forums",
			'link_title' => $clade->name . ' forum',
			);
		menu_link_save($menu);
	}
	// TODO delete?
}

function ibphelper_imagecache_default_presets() {
	$presets = array();
	$presets['profile_normal'] = array (
		'presetname' => 'profile_normal',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale',
				'data' => 
				array (
					'width' => '200',
					'height' => '200',
					'upscale' => 0,
				),
			),
		),
	);
	$presets['profile_small'] = array (
		'presetname' => 'profile_small',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '30',
					'height' => '30',
				),
			),
		),
	);
	$presets['profile_tiny'] = array (
		'presetname' => 'profile_tiny',
		'actions' => 
		array (
			0 => 
			array (
				'weight' => '0',
				'module' => 'imagecache',
				'action' => 'imagecache_scale_and_crop',
				'data' => 
				array (
					'width' => '24',
					'height' => '24',
				),
			),
		),
	);
	
	return $presets;
}

function ibphelper_taxonomy($op, $type, $array = NULL) {
	if ($type == "term") {
		$vocabulary = taxonomy_vocabulary_load($array['vid']);
		if ($vocabulary->name == 'Training types') {
			module_load_include('inc', 'pathauto', 'pathauto');
			switch ($op) {
				case "insert":
					// create path alias
					$alias = 'training/'.pathauto_cleanstring($array['name']);
					path_set_alias('training/'.$array['tid'],$alias);
					break;
				
				case "update":
					// update path alias
					path_set_alias('training/'.$array['tid']); // delete old path
					$alias = 'training/'.pathauto_cleanstring($array['name']);
					path_set_alias('training/'.$array['tid'], $alias);
					break;
					
				case "delete":
					// delete path alias
					path_set_alias('training/'.$array['tid']);
					break;	
			}
		}
	}
}


function ibphelper_ibp_training($category, $crop = NULL) {
	$args = array($category);
	if ($crop) {
		$args[] = $crop;
	}
	$view = views_get_view('training');
	$output = $view->preview('default', $args);
	if ($view->result) {
		return $output;
	} else {
		return "<h3>".t('No training materials available.')."</h3>";
	}
}

function ibphelper_ibp_training_title($category) {
	return taxonomy_get_term($category)->name;
}

function ibphelper_taxonomy_menu_path() {
	$output = array(
		'ibphelper_taxonomy_menu_path_custom' => t('IBP Custom'),
		);
	return $output;
}

function ibphelper_taxonomy_menu_path_custom($vid,$tid) {
	$vocabulary = taxonomy_vocabulary_load($vid);
	if ($vocabulary->name == 'Training types') {
		return "training/$tid";
	} else {
		return taxonomy_term_path(taxonomy_get_term($tid));
	}
}